# ---------- Build stage ----------
FROM golang:1.25-alpine AS builder

# Install dependencies
RUN apk add git build-base sqlite-dev openssl nss-tools

WORKDIR /app

# Copy go mod files first for caching
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Install mkcert
RUN wget -q https://dl.filippo.io/mkcert/latest?for=linux/amd64 -O /usr/local/bin/mkcert && \
    chmod +x /usr/local/bin/mkcert && \
    mkcert -install

# Generate a local CA + cert for localhost and IPs
RUN mkdir -p cert && \
    mkcert -key-file cert/key.pem -cert-file cert/cert.pem localhost 127.0.0.1 ::1 0.0.0.0

# Build your Go binary
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' -o main .

# Build cleanup_tokens binary
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' -o cleanup_tokens ./scripts/cleanup_tokens.go

# ---------- Runtime stage ----------
FROM alpine:latest

RUN apk add ca-certificates sqlite-libs nss-tools dcron
RUN addgroup -g 1001 -S appuser && adduser -u 1001 -S appuser -G appuser

WORKDIR /app

# Copy binaries and certs
COPY --from=builder --chown=appuser:appuser /app/main .
COPY --from=builder --chown=appuser:appuser /app/cleanup_tokens .
COPY --from=builder --chown=appuser:appuser /app/cert ./cert

# Create cron directory
RUN mkdir -p /var/spool/cron/crontabs && \
    chmod 755 /var/spool/cron/crontabs

# Copy and set up entrypoint script
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

EXPOSE 9997

ENTRYPOINT ["/bin/sh", "/app/entrypoint.sh"]
CMD ["./main"]
